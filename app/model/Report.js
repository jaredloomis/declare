import mongoose    from "mongoose"
import {
    GraphQLObjectType, GraphQLList, GraphQLString,
    GraphQLID
} from "graphql"
import GraphQLJSON from "graphql-type-json"
import createType  from "mongoose-schema-to-graphql"

import encodeVideo           from "../common/encodeVideo"
import {retrieveAsset, storeAsset} from "../access/Asset"

const ObjectId = mongoose.Schema.Types.ObjectId

const reportSchema = mongoose.Schema({
    pageID: {
        type: ObjectId,
        ref: "Page",
        index: true
    },
    packID: {
        type: ObjectId,
        ref: "TestPack"
    },
    name: {
        type: String,
        required: true
    },
    startTime: {
        type: Date,
        required: true
    },
    summary: {
        type: Object,
        default: {}
    },
    steps: {
        type: [{
            status: {
                type: String
            },
            message: {
                type: String
            },
            time: {
                type: Date
            },
            data: {
                type: Object
            },
            children: {
                type: Object
            }
        }]
    },
    owner: {
        type: ObjectId,
        ref: "Account"
    }
})

reportSchema.statics.graphQL = createType({
    name: "Report",
    description: "A report generated by running a test",
    class: "GraphQLObjectType",
    schema: reportSchema,
    extend: {
        summary: {type: GraphQLJSON},
        steps: {type: new GraphQLList(new GraphQLObjectType({
            name: "Step",
            fields: {
                status:   {type: GraphQLString},
                message:  {type: GraphQLString},
                time:     {type: GraphQLString},
                data:     {type: GraphQLJSON},
                children: {type: GraphQLJSON},
                owner:    {type: GraphQLID}
            }
        }))}
    }
})

reportSchema.methods.generateVideo = async function() {
    // Collect screenshots from report
    const screenshots = []
    for(const step of this.steps) {
        if(step.data && step.data.screenshot) {
            screenshots.push(await retrieveAsset(step.data.screenshot))
        }
    }
   
    // Encode a video (Buffer)
    const video = await encodeVideo(screenshots)

    // Upload to cloud
    const key = `${this.name}-${this.startTime}-video.mp4`
    await storeAsset(key, video)
    this.summary.video = key

    // Return key
    return key
}

module.exports = mongoose.model("Report", reportSchema)
