scalar DateTime
scalar JSON

##########
# Roots #
#########

type Query {
  account(id: Int!): Account
  user(id: Int!): User
  test(id: Int!): Test
}

type Mutation {
  login(email: String!, password: String!): String

  signup(accountName: String!, adminEmail: String!, adminPassword: String!): Account!
  createUser(email: String!, password: String!, accountId: Int!): User
  createCollection(name: String!): Collection
  createElement(name: String!, selector: String!, selectorType: String!, collectionId: Int!): Element
  createTest(name: String!, steps: [JSON!]!, collectionId: Int!): Test

  updateTest(id: Int!, name: String!, steps: [JSON!]!): Test

  executeTest(testId: Int!): Boolean
}

type Subscription {
  executeTest(testId: Int!): Report
  report: Report!
}

##############
# Core types #
##############

type Account {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  users: [User!]!
  collections: [Collection!]!
  suites: [Suite!]!
  tests: [Test!]!
  elements: [Element!]!
}

type Collection {
  id: Int!
  name: String!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  accountId: Int!

  tests: [Test!]!
}

type Report {
  id: Int!
  testId: Int!
  status: String!
  duration: Int!
  startTime: DateTime!
  endTime: DateTime!
  
  stepResults: [TestStepResult!]!
}

type Suite {
  id: Int!
  name: String!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  accountId: Int!

  tests: [Test!]!
}

type Test {
  id: Int!
  name: String!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  accountId: Int!
  collectionId: Int!

  steps: [TestStep!]!
  reports: [Report!]!
}

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  accountId: Int!

  email: String!
}

type Element {
  id: Int!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  accountId: Int!
  collectionId: Int!

  name: String!
  selector: String!
  selectorType: String!
}

##############
# Test Steps #
##############

union TestStep = ClickStep | SendTextStep | ExecuteJavascriptStep | GoToStep
  | AssertExistsStep | AssertTextStep | AssertJavascriptStep

type ClickStep {
  stepType: String!
  elementId: Int!
}

type SendTextStep {
  stepType: String!
  elementId: Int!
  text: String!
}

type ExecuteJavascriptStep {
  stepType: String!
  code: String!
}

type GoToStep {
  stepType: String!
  url: String!
}

# type RefreshStep -- no args

type AssertExistsStep {
  stepType: String!
  elementId: Int!

  """
  If true, the element must be visible as well as being present in the DOM.
  default: false.
  """
  visible: Boolean
}

type AssertTextStep {
  stepType: String!
  elementId: Int!
  text: String!
  invert: Boolean
  exactMatch: Boolean
}

"""
Asserts that the given javascript code evaluates to true when executed
in the test browser.
"""
type AssertJavascriptStep {
  stepType: String!
  code: String!
}

"""
Set a variable which can be used in later steps like so: {{variable_name}}.
"""
type SetVariableStep {
  stepType: String!
  name: String!
  value: SetVariableStepValue!
}

union SetVariableStepValue = SetVariableString | SetVariableJavascript | SetVariableElement

type SetVariableString {
  string: String!
}

type SetVariableJavascript {
  code: String!
}

type SetVariableElement {
  elementId: Int!
}

type ImportTestStep {
  stepType: String!
  testId: Int!
}

type TestStepResult {
  status: String!
  startTime: DateTime!
  endTime: DateTime!
  error: String
  screenshot: String
}
