###########
# Scalars #
###########

scalar DateTime
scalar JSON

#########
# Roots #
#########

type Query {
  account: Account!
  user(id: Int!): User!
  test(id: Int!): Test!
}

type Mutation {
  login(email: String!, password: String!): String!
  signup(accountName: String!, adminEmail: String!, adminPassword: String!): Account!

  createUser(user: UserInput!): User!
  createCollection(collection: CollectionCreateInput!): Collection!
  createElement(element: ElementCreateInput!): Element!
  createTest(test: TestCreateInput!): Test!

  updateTest(id: Int!, test: TestUpdateInput!): Test!
  deleteTest(id: Int!): Boolean!

  executeTest(testId: Int!): Boolean!
}

type Subscription {
  executeTest(testId: Int!): Report
  report: Report!
}

##############
# Core types #
##############

type Account {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  users: [User!]!
  collections: [Collection!]!
  suites: [Suite!]!
  tests: [Test!]!
  elements: [Element!]!
}

type Collection {
  id: Int!
  name: String!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  accountId: Int!

  tests: [Test!]!
}

input CollectionCreateInput {
  name: String!
}

type Suite {
  id: Int!
  name: String!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  accountId: Int!

  tests: [Test!]!
}

input SuiteInput {
  name: String!
}

type Test {
  id: Int!
  name: String!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  accountId: Int!
  collectionId: Int!

  steps: [TestStep!]!
  reports: [Report!]!
}

input TestCreateInput {
  collectionId: Int!
  name: String!
  steps: [TestStepInput!]!
}

input TestUpdateInput {
  collectionId: Int
  name: String
  steps: [TestStepInput!]
}

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  accountId: Int!

  email: String!
}

input UserInput {
  email: String!
  password: String!
}

type Element {
  id: Int!
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int!
  accountId: Int!
  collectionId: Int!

  name: String!
  selector: String!
  selectorType: String!
}

input ElementCreateInput {
  collectionId: Int!
  name: String!
  selector: String!
  selectorType: String!
}

##############
# Test Steps #
##############

union TestStep = ClickStep | SendTextStep | ExecuteJavascriptStep | GoToStep | RefreshStep
  | AssertExistsStep | AssertTextStep | AssertJavascriptStep | SetVariableStep | ImportTestStep
  | WaitStep

input TestStepInput {
  stepType: String!
  elementId: Int
  text: String
  code: String
  url: String
  visible: Boolean
  invert: Boolean
  exactMatch: Boolean
  name: String
  value: SetVariableStepValueInput
  testId: Int
  milliseconds: Int
}

type ClickStep {
  stepType: String!
  elementId: Int!
}

type SendTextStep {
  stepType: String!
  elementId: Int!
  text: String!
}

type ExecuteJavascriptStep {
  stepType: String!
  code: String!
}

type GoToStep {
  stepType: String!
  url: String!
}

type RefreshStep {
  stepType: String!
}

type AssertExistsStep {
  stepType: String!
  elementId: Int!

  """
  If true, the element must be visible as well as being present in the DOM.
  default: false.
  """
  visible: Boolean
}

type AssertTextStep {
  stepType: String!
  elementId: Int!
  text: String!
  invert: Boolean
  exactMatch: Boolean
}

"""
Asserts that the given javascript code evaluates to true when executed
in the test browser.
"""
type AssertJavascriptStep {
  stepType: String!
  code: String!
}

"""
Set a variable which can be used in later steps like so: {{variable_name}}.
"""
type SetVariableStep {
  stepType: String!
  name: String!
  value: SetVariableStepValue!
}

union SetVariableStepValue = SetVariableString | SetVariableJavascript | SetVariableElement

input SetVariableStepValueInput {
  string: String
  code: String
  elementId: Int
}

type SetVariableString {
  string: String!
}

type SetVariableJavascript {
  code: String!
}

type SetVariableElement {
  elementId: Int!
}

type ImportTestStep {
  stepType: String!
  testId: Int!
}

type WaitStep {
  stepType: String!
  milliseconds: Int!
}

##########
# Report #
##########

type Report {
  id: Int!
  testId: Int!
  status: String!
  startTime: DateTime!
  endTime: DateTime!
  
  stepResults: [TestStepResult!]!
}

type TestStepResult {
  status: TestStepStatus!
  endTime: DateTime!
  message: String!
  screenshot: String
  error: String
}

enum TestStepStatus {
  PASS
  FAIL
  ERROR
  NONE
}
